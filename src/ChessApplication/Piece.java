package com.circumspectus.ChessApplication;

import java.util.ArrayList;

/**
 * Class containing static methods to provide piece functionality.  Calculates possible moves from lookup tables.
 * 
 * @author  Christopher Stieg
 * @version 1.0
 */
public class Piece
{
    private final int currentPositionSerial; // serial number indicating the current position of the piece (a1 = 0, a2 = 1, ... h8 = 63)
    private final int pieceTypeColor;   // int representation of type and color of the piece following enumeration in Chessboard
    private final Chessboard board;     // link to parent Chessboard object to be able to interact with other piecesByType
    
    private static final int PIECE_VALUE[] = { 10000, 10000, 900, 900, 500, 500, 300, 300, 300, 300, 100, 100 };  // following enumeration in Chessboard
    
    private static final long QUEENS_ROOK[] = {      0x0000000000000001L, 0x0100000000000000L };
    private static final long KINGS_ROOK[] = {     0x0000000000000080L, 0x8000000000000000L };
    
    private static final long KING_MOVES[] = {      0x0000000000000302L, 0x0000000000000705L, 0x0000000000000E0AL, 0x0000000000001C14L,
                                                    0x0000000000003828L, 0x0000000000007050L, 0x000000000000E0A0L, 0x000000000000C040L,
                                                    0x0000000000030203L, 0x0000000000070507L, 0x00000000000E0A0EL, 0x00000000001C141CL,
                                                    0x0000000000382838L, 0x0000000000705070L, 0x0000000000E0A0E0L, 0x0000000000C040C0L,
                                                    0x0000000003020300L, 0x0000000007050700L, 0x000000000E0A0E00L, 0x000000001C141C00L,
                                                    0x0000000038283800L, 0x0000000070507000L, 0x00000000E0A0E000L, 0x00000000C040C000L,
                                                    0x0000000302030000L, 0x0000000705070000L, 0x0000000E0A0E0000L, 0x0000001C141C0000L,
                                                    0x0000003828380000L, 0x0000007050700000L, 0x000000E0A0E00000L, 0x000000C040C00000L,
                                                    0x0000030203000000L, 0x0000070507000000L, 0x00000E0A0E000000L, 0x00001C141C000000L,
                                                    0x0000382838000000L, 0x0000705070000000L, 0x0000E0A0E0000000L, 0x0000C040C0000000L,
                                                    0x0003020300000000L, 0x0007050700000000L, 0x000E0A0E00000000L, 0x001C141C00000000L,
                                                    0x0038283800000000L, 0x0070507000000000L, 0x00E0A0E000000000L, 0x00C040C000000000L,
                                                    0x0302030000000000L, 0x0705070000000000L, 0x0E0A0E0000000000L, 0x1C141C0000000000L,
                                                    0x3828380000000000L, 0x7050700000000000L, 0xE0A0E00000000000L, 0xC040C00000000000L,
                                                    0x0203000000000000L, 0x0507000000000000L, 0x0A0E000000000000L, 0x141C000000000000L,
                                                    0x2838000000000000L, 0x5070000000000000L, 0xA0E0000000000000L, 0x40C0000000000000L };  
    
    private static final long QUEEN_MOVES[] = {     0x81412111090503FEL, 0x02824222120A07FDL, 0x0404844424150EFBL, 0x08080888492A1CF7L,
                                                    0x10101011925438EFL, 0x2020212224A870DFL, 0x404142444850E0BFL, 0x8182848890A0C07FL,
                                                    0x412111090503FE03L, 0x824222120A07FD07L, 0x04844424150EFB0EL, 0x080888492A1CF71CL,
                                                    0x101011925438EF38L, 0x20212224A870DF70L, 0x4142444850E0BFE0L, 0x82848890A0C07FC0L,
                                                    0x2111090503FE0305L, 0x4222120A07FD070AL, 0x844424150EFB0E15L, 0x0888492A1CF71C2AL,
                                                    0x1011925438EF3854L, 0x212224A870DF70A8L, 0x42444850E0BFE050L, 0x848890A0C07FC0A0L,
                                                    0x11090503FE030509L, 0x22120A07FD070A12L, 0x4424150EFB0E1524L, 0x88492A1CF71C2A49L,
                                                    0x11925438EF385492L, 0x2224A870DF70A824L, 0x444850E0BFE05048L, 0x8890A0C07FC0A090L,
                                                    0x090503FE03050911L, 0x120A07FD070A1222L, 0x24150EFB0E152444L, 0x492A1CF71C2A4988L,
                                                    0x925438EF38549211L, 0x24A870DF70A82422L, 0x4850E0BFE0504844L, 0x90A0C07FC0A09088L,
                                                    0x0503FE0305091121L, 0x0A07FD070A122242L, 0x150EFB0E15244484L, 0x2A1CF71C2A498808L,
                                                    0x5438EF3854921110L, 0xA870DF70A8242221L, 0x50E0BFE050484442L, 0xA0C07FC0A0908884L,
                                                    0x03FE030509112141L, 0x07FD070A12224282L, 0x0EFb0E1524448404L, 0x1CF71C2A49880808L,
                                                    0x38EF385492111010L, 0x70DF70A824222120L, 0xE0BFE05048444241L, 0xC07FC0A090888482L,
                                                    0xFE03050911214181L, 0xFD070A1222428202L, 0xFB0E152444840404L, 0xF71C2A4988080808L,
                                                    0xEF38549211101010L, 0xDF70A82422212020L, 0xBFE0504844424140L, 0x7FC0A09088848281L };
    
    private static final long ROOK_MOVES[] = {      0x01010101010101FEL, 0x02020202020202FDL, 0x04040404040404FBL, 0x08080808080808F7L,
                                                    0x10101010101010EFL, 0x20202020202020DFL, 0x40404040404040BFL, 0x808080808080807FL,
                                                    0x010101010101FE01L, 0x020202020202FD02L, 0x040404040404FB04L, 0x080808080808F708L,
                                                    0x101010101010EF10L, 0x202020202020DF20L, 0x404040404040BF40L, 0x8080808080807F80L,
                                                    0x0101010101FE0101L, 0x0202020202FD0202L, 0x0404040404FB0404L, 0x0808080808F70808L,
                                                    0x1010101010EF1010L, 0x2020202020DF2020L, 0x4040404040BF4040L, 0x80808080807F8080L,
                                                    0x01010101FE010101L, 0x02020202FD020202L, 0x04040404FB040404L, 0x08080808F7080808L,
                                                    0x10101010EF101010L, 0x20202020DF202020L, 0x40404040BF404040L, 0x808080807F808080L,
                                                    0x010101FE01010101L, 0x020202FD02020202L, 0x040404FB04040404L, 0x080808F708080808L,
                                                    0x101010EF10101010L, 0x202020DF20202020L, 0x404040BF40404040L, 0x8080807F80808080L,
                                                    0x0101FE0101010101L, 0x0202FD0202020202L, 0x0404FB0404040404L, 0x0808F70808080808L,
                                                    0x1010EF1010101010L, 0x2020DF2020202020L, 0x4040BF4040404040L, 0x80807F8080808080L,
                                                    0x01FE010101010101L, 0x02FD020202020202L, 0x04FB040404040404L, 0x08F7080808080808L,
                                                    0x10EF101010101010L, 0x20DF202020202020L, 0x40BF404040404040L, 0x807F808080808080L,
                                                    0xFE01010101010101L, 0xFD02020202020202L, 0xFB04040404040404L, 0xF708080808080808L,
                                                    0xEF10101010101010L, 0xDF20202020202020L, 0xBF40404040404040L, 0x7F80808080808080L };
           
    private static final long BISHOP_MOVES[] = {    0x8040201008040200L, 0x0080402010080500L, 0x0000804020110A00L, 0x0000008041221400L,
                                                    0x0000000182442800L, 0x0000010204885000L, 0x000102040810A000L, 0x0102040810204000L,
                                                    0x4020100804020002L, 0x8040201008050005L, 0x00804020110A000AL, 0x0000804122140014L,
                                                    0x0000018244280028L, 0x0001020488500050L, 0x0102040810A000A0L, 0x0204081020400040L,
                                                    0x2010080402000204L, 0x4020100805000508L, 0x804020110A000A11L, 0x0080412214001422L,
                                                    0x0001824428002844L, 0x0102048850005088L, 0x02040810A000A010L, 0x0408102040004020L,
                                                    0x1008040200020408L, 0x2010080500050810L, 0x4020110A000A1120L, 0x8041221400142241L,
                                                    0x0182442800284482L, 0x0204885000508804L, 0x040810A000A01008L, 0x0810204000402010L,
                                                    0x0804020002040810L, 0x1008050005081020L, 0x20110A000A112040L, 0x4122140014224180L,
                                                    0x8244280028448201L, 0x0488500050880402L, 0x0810A000A0100804L, 0x1020400040201008L,
                                                    0x0402000204081020L, 0x0805000508102040L, 0x110A000A11204080L, 0x2214001422418000L,
                                                    0x4428002844820100L, 0x8850005088040201L, 0x10A000A010080402L, 0x2040004020100804L,
                                                    0x0200020408102040L, 0x0500050810204080L, 0x0A000A1120408000L, 0x1400142241800000L,
                                                    0x2800284482010000L, 0x5000508804020100L, 0xA000A01008040201L, 0x4000402010080402L,
                                                    0x0002040810204080L, 0x0005081020408000L, 0x000A112040800000L, 0x0014224180000000L,
                                                    0x0028448201000000L, 0x0050880402010000L, 0x00A0100804020100L, 0x0040201008040201L };
    
    private static final long KNIGHT_MOVES[] = {    0x0000000000020400L, 0x0000000000050800L, 0x00000000000A1100L, 0x0000000000142200L,
                                                    0x0000000000284400L, 0x0000000000508800L, 0x0000000000A01000L, 0x0000000000402000L,
                                                    0x0000000002040004L, 0x0000000005080008L, 0x000000000A110011L, 0x0000000014220022L,
                                                    0x0000000028440044L, 0x0000000050880088L, 0x00000000A0100010L, 0x0000000040200020L,
                                                    0x0000000204000402L, 0x0000000508000805L, 0x0000000A1100110AL, 0x0000001422002214L,
                                                    0x0000002844004428L, 0x0000005088008850L, 0x000000A0100010A0L, 0x0000004020002040L,
                                                    0x0000020400040200L, 0x0000050800080500L, 0x00000A1100110A00L, 0x0000142200221400L,
                                                    0x0000284400442800L, 0x0000508800885000L, 0x0000A0100010A000L, 0x0000402000204000L,
                                                    0x0002040004020000L, 0x0005080008050000L, 0x000A1100110A0000L, 0x0014220022140000L,
                                                    0x0028440044280000L, 0x0050880088500000L, 0x00A0100010A00000L, 0x0040200020400000L,
                                                    0x0204000402000000L, 0x0508000805000000L, 0x0A1100110A000000L, 0x1422002214000000L,
                                                    0x2844004428000000L, 0x5088008850000000L, 0xA0100010A0000000L, 0x4020002040000000L,
                                                    0x0400040200000000L, 0x0800080500000000L, 0x1100110A00000000L, 0x2200221400000000L,
                                                    0x4400442800000000L, 0x8800885000000000L, 0x100010A000000000L, 0x2000204000000000L,
                                                    0x0004020000000000L, 0x0008050000000000L, 0x00110A0000000000L, 0x0022140000000000L,
                                                    0x0044280000000000L, 0x0088500000000000L, 0x0010A00000000000L, 0x0020400000000000L };
    
    private static final long WHITE_PAWN_PUSHES[] = { 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                    0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                    0x0000000001010000L, 0x0000000002020000L, 0x0000000004040000L, 0x0000000008080000L,
                                                    0x0000000010100000L, 0x0000000020200000L, 0x0000000040400000L, 0x0000000080800000L,
                                                    0x0000000001000000L, 0x0000000002000000L, 0x0000000004000000L, 0x0000000008000000L,
                                                    0x0000000010000000L, 0x0000000020000000L, 0x0000000040000000L, 0x0000000080000000L,
                                                    0x0000000100000000L, 0x0000000200000000L, 0x0000000400000000L, 0x0000000800000000L,
                                                    0x0000001000000000L, 0x0000002000000000L, 0x0000004000000000L, 0x0000008000000000L,
                                                    0x0000010000000000L, 0x0000020000000000L, 0x0000040000000000L, 0x0000080000000000L,
                                                    0x0000100000000000L, 0x0000200000000000L, 0x0000400000000000L, 0x0000800000000000L,
                                                    0x0001000000000000L, 0x0002000000000000L, 0x0004000000000000L, 0x0008000000000000L,
                                                    0x0010000000000000L, 0x0020000000000000L, 0x0040000000000000L, 0x0080000000000000L,
                                                    0x0100000000000000L, 0x0200000000000000L, 0x0400000000000000L, 0x0800000000000000L,
                                                    0x1000000000000000L, 0x2000000000000000L, 0x4000000000000000L, 0x8000000000000000L,
                                                    0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
                                                    0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L };
    
    private static final long BLACK_PAWN_PUSHES[] = { 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                    0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                    0x0000000000000001L, 0x0000000000000002L, 0x0000000000000004L, 0x0000000000000008L,
                                                    0x0000000000000010L, 0x0000000000000020L, 0x0000000000000040L, 0x0000000000000080L,
                                                    0x0000000000000100L, 0x0000000000000200L, 0x0000000000000400L, 0x0000000000000800L,
                                                    0x0000000000001000L, 0x0000000000002000L, 0x0000000000004000L, 0x0000000000008000L,
                                                    0x0000000000010000L, 0x0000000000020000L, 0x0000000000040000L, 0x0000000000080000L,
                                                    0x0000000000100000L, 0x0000000000200000L, 0x0000000000400000L, 0x0000000000800000L,
                                                    0x0000000001000000L, 0x0000000002000000L, 0x0000000004000000L, 0x0000000008000000L,
                                                    0x0000000010000000L, 0x0000000020000000L, 0x0000000040000000L, 0x0000000080000000L,
                                                    0x0000000100000000L, 0x0000000200000000L, 0x0000000400000000L, 0x0000000800000000L,
                                                    0x0000001000000000L, 0x0000002000000000L, 0x0000004000000000L, 0x0000008000000000L,
                                                    0x0000010100000000L, 0x0000020200000000L, 0x0000040400000000L, 0x0000080800000000L,
                                                    0x0000101000000000L, 0x0000202000000000L, 0x0000404000000000L, 0x0000808000000000L,
                                                    0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
                                                    0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L };
    
    
    private static final long WHITE_PAWN_CAPTURES[] = { 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                    0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                    0x0000000000020000L, 0x0000000000050000L, 0x00000000000A0000L, 0x0000000000140000L,
                                                    0x0000000000280000L, 0x0000000000500000L, 0x0000000000A00000L, 0x0000000000400000L,
                                                    0x0000000002000000L, 0x0000000005000000L, 0x000000000A000000L, 0x0000000014000000L,
                                                    0x0000000028000000L, 0x0000000050000000L, 0x00000000A0000000L, 0x0000000040000000L,
                                                    0x0000000200000000L, 0x0000000500000000L, 0x0000000A00000000L, 0x0000001400000000L,
                                                    0x0000002800000000L, 0x0000005000000000L, 0x000000A000000000L, 0x0000004000000000L,
                                                    0x0000020000000000L, 0x0000050000000000L, 0x00000A0000000000L, 0x0000140000000000L,
                                                    0x0000280000000000L, 0x0000500000000000L, 0x0000A00000000000L, 0x0000400000000000L,
                                                    0x0002000000000000L, 0x0005000000000000L, 0x000A000000000000L, 0x0014000000000000L,
                                                    0x0028000000000000L, 0x0050000000000000L, 0x00A0000000000000L, 0x0040000000000000L,
                                                    0x0200000000000000L, 0x0500000000000000L, 0x0A00000000000000L, 0x1400000000000000L,
                                                    0x2800000000000000L, 0x5000000000000000L, 0xA000000000000000L, 0x4000000000000000L,
                                                    0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
                                                    0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L };
    
    private static final long BLACK_PAWN_CAPTURES[] = { 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                    0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                    0x0000000000000002L, 0x0000000000000005L, 0x000000000000000AL, 0x0000000000000014L,
                                                    0x0000000000000028L, 0x0000000000000050L, 0x00000000000000A0L, 0x0000000000000040L,
                                                    0x0000000000000200L, 0x0000000000000500L, 0x0000000000000A00L, 0x0000000000001400L,
                                                    0x0000000000002800L, 0x0000000000005000L, 0x000000000000A000L, 0x0000000000004000L,
                                                    0x0000000000020000L, 0x0000000000050000L, 0x00000000000A0000L, 0x0000000000140000L,
                                                    0x0000000000280000L, 0x0000000000500000L, 0x0000000000A00000L, 0x0000000000400000L,
                                                    0x0000000002000000L, 0x0000000005000000L, 0x000000000A000000L, 0x0000000014000000L,
                                                    0x0000000028000000L, 0x0000000050000000L, 0x00000000A0000000L, 0x0000000040000000L,
                                                    0x0000000200000000L, 0x0000000500000000L, 0x0000000A00000000L, 0x0000001400000000L,
                                                    0x0000002800000000L, 0x0000005000000000L, 0x000000A000000000L, 0x0000004000000000L,
                                                    0x0000020000000000L, 0x0000050000000000L, 0x00000A0000000000L, 0x0000140000000000L,
                                                    0x0000280000000000L, 0x0000500000000000L, 0x0000A00000000000L, 0x0000400000000000L,
                                                    0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
                                                    0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L };
    
    
    private static final long POTENTIAL_MOVES[][]= new long[][] {   KING_MOVES,         KING_MOVES,
                                                                    QUEEN_MOVES,        QUEEN_MOVES,
                                                                    ROOK_MOVES,         ROOK_MOVES,
                                                                    BISHOP_MOVES,       BISHOP_MOVES,
                                                                    KNIGHT_MOVES,       KNIGHT_MOVES,
                                                                    WHITE_PAWN_PUSHES,  BLACK_PAWN_PUSHES };
    
    private static final long POTENTIAL_PAWN_CAPTURES[][] = new long[][] { WHITE_PAWN_CAPTURES, BLACK_PAWN_CAPTURES };
    

    
    
    // blockers (excludeding blocking pieces themselves)
    private static final long N_BLOCKED[] = {   0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                0x0101010101010000L, 0x0202020202020000L, 0x0404040404040000L, 0x0808080808080000L,
                                                0x1010101010100000L, 0x2020202020200000L, 0x4040404040400000L, 0x8080808080800000L,
                                                0x0101010101000000L, 0x0202020202000000L, 0x0404040404000000L, 0x0808080808000000L,
                                                0x1010101010000000L, 0x2020202020000000L, 0x4040404040000000L, 0x8080808080000000L,
                                                0x0101010100000000L, 0x0202020200000000L, 0x0404040400000000L, 0x0808080800000000L,
                                                0x1010101000000000L, 0x2020202000000000L, 0x4040404000000000L, 0x8080808000000000L,
                                                0x0101010000000000L, 0x0202020000000000L, 0x0404040000000000L, 0x0808080000000000L,
                                                0x1010100000000000L, 0x2020200000000000L, 0x4040400000000000L, 0x8080800000000000L,
                                                0x0101000000000000L, 0x0202000000000000L, 0x0404000000000000L, 0x0808000000000000L,
                                                0x1010000000000000L, 0x2020000000000000L, 0x4040000000000000L, 0x8080000000000000L,
                                                0x0100000000000000L, 0x0200000000000000L, 0x0400000000000000L, 0x0800000000000000L,
                                                0x1000000000000000L, 0x2000000000000000L, 0x4000000000000000L, 0x8000000000000000L,
                                                0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L } ;
    
    private static final long NE_BLOCKED[] = {  0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                0x0000000000000000L, 0x8040201008040000L, 0x0080402010080000L, 0x0000804020100000L,
                                                0x0000008040200000L, 0x0000000080400000L, 0x0000000000800000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x4020100804000000L, 0x8040201008000000L, 0x0080402010000000L,
                                                0x0000804020000000L, 0x0000008040000000L, 0x0000000080000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x2010080400000000L, 0x4020100800000000L, 0x8040201000000000L,
                                                0x0080402000000000L, 0x0000804000000000L, 0x0000008000000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x1008040000000000L, 0x2010080000000000L, 0x4020100000000000L,
                                                0x8040200000000000L, 0x0080400000000000L, 0x0000800000000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0804000000000000L, 0x1008000000000000L, 0x2010000000000000L,
                                                0x4020000000000000L, 0x8040000000000000L, 0x0080000000000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0400000000000000L, 0x0800000000000000L, 0x1000000000000000L,
                                                0x2000000000000000L, 0x4000000000000000L, 0x8000000000000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L };
        
    private static final long E_BLOCKED[] = {   0x0000000000000000L, 0x00000000000000FCL, 0x00000000000000F8L, 0x00000000000000F0L,
                                                0x00000000000000E0L, 0x00000000000000C0L, 0x0000000000000080L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x000000000000FC00L, 0x000000000000F800L, 0x000000000000F000L,
                                                0x000000000000E000L, 0x000000000000C000L, 0x0000000000008000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000000FC0000L, 0x0000000000F80000L, 0x0000000000F00000L,
                                                0x0000000000E00000L, 0x0000000000C00000L, 0x0000000000800000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x00000000FC000000L, 0x00000000F8000000L, 0x00000000F0000000L,
                                                0x00000000E0000000L, 0x00000000C0000000L, 0x0000000080000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x000000FC00000000L, 0x000000F800000000L, 0x000000F000000000L,
                                                0x000000E000000000L, 0x000000C000000000L, 0x0000008000000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000FC0000000000L, 0x0000F80000000000L, 0x0000F00000000000L,
                                                0x0000E00000000000L, 0x0000C00000000000L, 0x0000800000000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x00FC000000000000L, 0x00F8000000000000L, 0x00F0000000000000L,
                                                0x00E0000000000000L, 0x00C0000000000000L, 0x0080000000000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0xFC00000000000000L, 0xF800000000000000L, 0xF000000000000000L,
                                                0xE000000000000000L, 0xC000000000000000L, 0x8000000000000000L, 0x0000000000000000L };
    
    private static final long SE_BLOCKED[] = {  0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                0x0000000000000000L, 0x0000000000000004L, 0x0000000000000008L, 0x0000000000000010L,
                                                0x0000000000000020L, 0x0000000000000040L, 0x0000000000000080L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000000000408L, 0x0000000000000810L, 0x0000000000001020L,
                                                0x0000000000002040L, 0x0000000000004080L, 0x0000000000008000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000000040810L, 0x0000000000081020L, 0x0000000000102040L,
                                                0x0000000000204080L, 0x0000000000408000L, 0x0000000000800000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000004081020L, 0x0000000008102040L, 0x0000000010204080L,
                                                0x0000000020408000L, 0x0000000040800000L, 0x0000000080000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000408102040L, 0x0000000810204080L, 0x0000001020408000L,
                                                0x0000002040800000L, 0x0000004080000000L, 0x0000008000000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000040810204080L, 0x0000081020408000L, 0x0000102040800000L,
                                                0x0000204080000000L, 0x0000408000000000L, 0x0000800000000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L };

    private static final long S_BLOCKED[] = {   0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                0x0000000000000001L, 0x0000000000000002L, 0x0000000000000004L, 0x0000000000000008L,
                                                0x0000000000000010L, 0x0000000000000020L, 0x0000000000000040L, 0x0000000000000080L,
                                                0x0000000000000101L, 0x0000000000000202L, 0x0000000000000404L, 0x0000000000000808L,
                                                0x0000000000001010L, 0x0000000000002020L, 0x0000000000004040L, 0x0000000000008080L,
                                                0x0000000000010101L, 0x0000000000020202L, 0x0000000000040404L, 0x0000000000080808L,
                                                0x0000000000101010L, 0x0000000000202020L, 0x0000000000404040L, 0x0000000000808080L,
                                                0x0000000001010101L, 0x0000000002020202L, 0x0000000004040404L, 0x0000000008080808L,
                                                0x0000000010101010L, 0x0000000020202020L, 0x0000000040404040L, 0x0000000080808080L,
                                                0x0000000101010101L, 0x0000000202020202L, 0x0000000404040404L, 0x0000000808080808L,
                                                0x0000001010101010L, 0x0000002020202020L, 0x0000004040404040L, 0x0000008080808080L,
                                                0x0000010101010101L, 0x0000020202020202L, 0x0000040404040404L, 0x0000080808080808L,
                                                0x0000101010101010L, 0x0000202020202020L, 0x0000404040404040L, 0x0000808080808080L,
                                                0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L };
    
    private static final long SW_BLOCKED[] = {  0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                0x0000000000000000L, 0x0000000000000001L, 0x0000000000000002L, 0x0000000000000004L,
                                                0x0000000000000008L, 0x0000000000000010L, 0x0000000000000020L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000000000100L, 0x0000000000000201L, 0x0000000000000402L,
                                                0x0000000000000804L, 0x0000000000001008L, 0x0000000000002010L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000000010000L, 0x0000000000020100L, 0x0000000000040201L,
                                                0x0000000000080402L, 0x0000000000100804L, 0x0000000000201008L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000001000000L, 0x0000000002010000L, 0x0000000004020100L,
                                                0x0000000008040201L, 0x0000000010080402L, 0x0000000020100804L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000100000000L, 0x0000000201000000L, 0x0000000402010000L,
                                                0x0000000804020100L, 0x0000001008040201L, 0x0000002010080402L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000010000000000L, 0x0000020100000000L, 0x0000040201000000L,
                                                0x0000080402010000L, 0x0000100804020100L, 0x0000201008040201L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L };
    
    private static final long W_BLOCKED[] = {   0x0000000000000000L, 0x0000000000000001L, 0x0000000000000003L, 0x0000000000000007L,
                                                0x000000000000000FL, 0x000000000000001FL, 0x000000000000003FL, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000000000100L, 0x0000000000000300L, 0x0000000000000700L,
                                                0x0000000000000F00L, 0x0000000000001F00L, 0x0000000000003F00L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000000010000L, 0x0000000000030000L, 0x0000000000070000L,
                                                0x00000000000F0000L, 0x00000000001F0000L, 0x00000000003F0000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000001000000L, 0x0000000003000000L, 0x0000000007000000L,
                                                0x000000000F000000L, 0x000000001F000000L, 0x000000003F000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000100000000L, 0x0000000300000000L, 0x0000000700000000L,
                                                0x0000000F00000000L, 0x0000001F00000000L, 0x0000003F00000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000010000000000L, 0x0000030000000000L, 0x0000070000000000L,
                                                0x00000F0000000000L, 0x00001F0000000000L, 0x00003F0000000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0001000000000000L, 0x0003000000000000L, 0x0007000000000000L,
                                                0x000F000000000000L, 0x001F000000000000L, 0x003F000000000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0100000000000000L, 0x0300000000000000L, 0x0700000000000000L,
                                                0x0F00000000000000L, 0x1F00000000000000L, 0x3F00000000000000L, 0x0000000000000000L };
    
    private static final long NW_BLOCKED[] = {  0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 
                                                0x0000000000000000L, 0x0000000000010000L, 0x0000000001020000L, 0x0000000102040000L, 
                                                0x0000010204080000L, 0x0001020408100000L, 0x0102040810200000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000001000000L, 0x0000000102000000L, 0x0000010204000000L,
                                                0x0001020408000000L, 0x0102040810000000L, 0x0204081020000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000100000000L, 0x0000010200000000L, 0x0001020400000000L,
                                                0x0102040800000000L, 0x0204081000000000L, 0x0408102000000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000010000000000L, 0x0001020000000000L, 0x0102040000000000L,
                                                0x0204080000000000L, 0x0408100000000000L, 0x0810200000000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0001000000000000L, 0x0102000000000000L, 0x0204000000000000L,
                                                0x0408000000000000L, 0x0810000000000000L, 0x1020000000000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0100000000000000L, 0x0200000000000000L, 0x0400000000000000L,
                                                0x0800000000000000L, 0x1000000000000000L, 0x2000000000000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L,
                                                0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L, 0x0000000000000000L };
    
    // usage: BLOCKED[direction][blockerSerial]
    private static final long BLOCKED[][] = new long[][] {N_BLOCKED, NE_BLOCKED, E_BLOCKED, SE_BLOCKED, S_BLOCKED, SW_BLOCKED, W_BLOCKED, NW_BLOCKED };
            
    // public static enum Dir { N, NE, E, SE, S, SW, W, NW };
    private static final int NONE = -1;
    public static final int N   = 0;
    public static final int NE  = 1;
    public static final int E   = 2;
    public static final int SE  = 3;
    public static final int S   = 4;
    public static final int SW  = 5;
    public static final int W   = 6;
    public static final int NW  = 7;
    
    
    private static final int a1[] =  {      NONE,   E,      E,      E,      E,      E,      E,      E,
                                            N,      NE,     NONE,   NONE,   NONE,   NONE,   NONE,   NONE, 
                                            N,      NONE,   NE,     NONE,   NONE,   NONE,   NONE,   NONE,   
                                            N,      NONE,   NONE,   NE,     NONE,   NONE,   NONE,   NONE,   
                                            N,      NONE,   NONE,   NONE,   NE,     NONE,   NONE,   NONE,  
                                            N,      NONE,   NONE,   NONE,   NONE,   NE,     NONE,   NONE,
                                            N,      NONE,   NONE,   NONE,   NONE,   NONE,   NE,     NONE,
                                            N,      NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   NE  } ;
    
    private static final int a2[] =  {      W,      NONE,   E,      E,      E,      E,      E,      E,
                                            NW,     N,      NE,     NONE,   NONE,   NONE,   NONE,   NONE,
                                            NONE,   N,      NONE,   NE,     NONE,   NONE,   NONE,   NONE,
                                            NONE,   N,      NONE,   NONE,   NE,     NONE,   NONE,   NONE,
                                            NONE,   N,      NONE,   NONE,   NONE,   NE,     NONE,   NONE,
                                            NONE,   N,      NONE,   NONE,   NONE,   NONE,   NE,     NONE,
                                            NONE,   N,      NONE,   NONE,   NONE,   NONE,   NONE,   NE,
                                            NONE,   N,      NONE,   NONE,   NONE,   NONE,   NONE,   NONE };
    
        private static final int a3[] =  {  W,      W,      NONE,   E,      E,      E,      E,      E,
                                            NONE,   NW,     N,      NE,     NONE,   NONE,   NONE,   NONE,
                                            NW,     NONE,   N,      NONE,   NE,     NONE,   NONE,   NONE,
                                            NONE,   NONE,   N,      NONE,   NONE,   NE,     NONE,   NONE,
                                            NONE,   NONE,   N,      NONE,   NONE,   NONE,   NE,     NONE,
                                            NONE,   NONE,   N,      NONE,   NONE,   NONE,   NONE,   NE,
                                            NONE,   NONE,   N,      NONE,   NONE,   NONE,   NONE,   NONE,
                                            NONE,   NONE,   N,      NONE,   NONE,   NONE,   NONE,   NONE };
        
        private static final int a4[] =  {  W,      W,      W,      NONE,   E,      E,      E,      E,
                                            NONE,   NONE,   NW,     N,      NE,     NONE,   NONE,   NONE,
                                            NONE,   NW,     NONE,   N,      NONE,   NE,     NONE,   NONE,
                                            NW,     NONE,   NONE,   N,      NONE,   NONE,   NE,     NONE,
                                            NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE,   NE,
                                            NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE,   NONE,
                                            NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE,   NONE,
                                            NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE,   NONE };
        
        private static final int a5[] =  {  W,      W,      W,      W,      NONE,   E,      E,      E,
                                            NONE,   NONE,   NONE,   NW,     N,      NE,     NONE,   NONE,
                                            NONE,   NONE,   NW,     NONE,   N,      NONE,   NE,     NONE,
                                            NONE,   NW,     NONE,   NONE,   N,      NONE,   NONE,   NE,
                                            NW,     NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE,
                                            NONE,   NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE,
                                            NONE,   NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE,
                                            NONE,   NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE };
        
        private static final int a6[] =  {  W,      W,      W,      W,      W,      NONE,   E,      E,
                                            NONE,   NONE,   NONE,   NONE,   NW,     N,      NE,     NONE,
                                            NONE,   NONE,   NONE,   NW,     NONE,   N,      NONE,   NE,
                                            NONE,   NONE,   NW,     NONE,   NONE,   N,      NONE,   NONE,
                                            NONE,   NW,     NONE,   NONE,   NONE,   N,      NONE,   NONE,
                                            NW,     NONE,   NONE,   NONE,   NONE,   N,      NONE,   NONE,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   N,      NONE,   NONE,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   N,      NONE,   NONE };
        
         private static final int a7[] =  { W,      W,      W,      W,      W,      W,      NONE,   E,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NW,     N,      NE,    
                                            NONE,   NONE,   NONE,   NONE,   NW,     NONE,   N,      NONE, 
                                            NONE,   NONE,   NONE,   NW,     NONE,   NONE,   N,      NONE, 
                                            NONE,   NONE,   NW,     NONE,   NONE,   NONE,   N,      NONE,  
                                            NONE,   NW,     NONE,   NONE,   NONE,   NONE,   N,      NONE,
                                            NW,     NONE,   NONE,   NONE,   NONE,   NONE,   N,      NONE, 
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   N,      NONE };       
                
         private static final int a8[] =  { W,      W,      W,      W,      W,      W,      W,      NONE,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   NW,     N,       
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NW,     NONE,   N,    
                                            NONE,   NONE,   NONE,   NONE,   NW,     NONE,   NONE,   N,    
                                            NONE,   NONE,   NONE,   NW,     NONE,   NONE,   NONE,   N,     
                                            NONE,   NONE,   NW,     NONE,   NONE,   NONE,   NONE,   N, 
                                            NONE,   NW,     NONE,   NONE,   NONE,   NONE,   NONE,   N,    
                                            NW,     NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   N  };      
         
    
        private static final int b1[] =  {  S,      SE,     NONE,   NONE,   NONE,   NONE,   NONE,   NONE,
                                            NONE,   E,      E,      E,      E,      E,      E,      E,
                                            N,      NE,     NONE,   NONE,   NONE,   NONE,   NONE,   NONE, 
                                            N,      NONE,   NE,     NONE,   NONE,   NONE,   NONE,   NONE,   
                                            N,      NONE,   NONE,   NE,     NONE,   NONE,   NONE,   NONE,   
                                            N,      NONE,   NONE,   NONE,   NE,     NONE,   NONE,   NONE,  
                                            N,      NONE,   NONE,   NONE,   NONE,   NE,     NONE,   NONE,
                                            N,      NONE,   NONE,   NONE,   NONE,   NONE,   NE,     NONE } ;
    
        private static final int b2[] =  {  SW,     S,      SE,     NONE,   NONE,   NONE,   NONE,   NONE,   
                                            W,      NONE,   E,      E,      E,      E,      E,      E,
                                            NW,     N,      NE,     NONE,   NONE,   NONE,   NONE,   NONE,
                                            NONE,   N,      NONE,   NE,     NONE,   NONE,   NONE,   NONE,
                                            NONE,   N,      NONE,   NONE,   NE,     NONE,   NONE,   NONE,
                                            NONE,   N,      NONE,   NONE,   NONE,   NE,     NONE,   NONE,
                                            NONE,   N,      NONE,   NONE,   NONE,   NONE,   NE,     NONE,
                                            NONE,   N,      NONE,   NONE,   NONE,   NONE,   NONE,   NE   };
    
        private static final int b3[] =  {  NONE,   SW,     S,      SE,     NONE,   NONE,   NONE,   NONE, 
                                            W,      W,      NONE,   E,      E,      E,      E,      E,
                                            NONE,   NW,     N,      NE,     NONE,   NONE,   NONE,   NONE,
                                            NW,     NONE,   N,      NONE,   NE,     NONE,   NONE,   NONE,
                                            NONE,   NONE,   N,      NONE,   NONE,   NE,     NONE,   NONE,
                                            NONE,   NONE,   N,      NONE,   NONE,   NONE,   NE,     NONE,
                                            NONE,   NONE,   N,      NONE,   NONE,   NONE,   NONE,   NE,
                                            NONE,   NONE,   N,      NONE,   NONE,   NONE,   NONE,   NONE };
        
        private static final int b4[] =  {  NONE,   NONE,   SW,     S,      SE,     NONE,   NONE,   NONE,   
                                            W,      W,      W,      NONE,   E,      E,      E,      E,
                                            NONE,   NONE,   NW,     N,      NE,     NONE,   NONE,   NONE,
                                            NONE,   NW,     NONE,   N,      NONE,   NE,     NONE,   NONE,
                                            NW,     NONE,   NONE,   N,      NONE,   NONE,   NE,     NONE,
                                            NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE,   NE,
                                            NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE,   NONE,
                                            NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE,   NONE };
        
        private static final int b5[] =  {  NONE,   NONE,   NONE,   SW,     S,      SE,     NONE,   NONE,   
                                            W,      W,      W,      W,      NONE,   E,      E,      E,
                                            NONE,   NONE,   NONE,   NW,     N,      NE,     NONE,   NONE,
                                            NONE,   NONE,   NW,     NONE,   N,      NONE,   NE,     NONE,
                                            NONE,   NW,     NONE,   NONE,   N,      NONE,   NONE,   NE,
                                            NW,     NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE,
                                            NONE,   NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE,
                                            NONE,   NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE };
        
        private static final int b6[] =  {  NONE,   NONE,   NONE,   NONE,   SW,     S,      SE,     NONE,   
                                            W,      W,      W,      W,      W,      NONE,   E,      E,
                                            NONE,   NONE,   NONE,   NONE,   NW,     N,      NE,     NONE,
                                            NONE,   NONE,   NONE,   NW,     NONE,   N,      NONE,   NE,
                                            NONE,   NONE,   NW,     NONE,   NONE,   N,      NONE,   NONE,
                                            NONE,   NW,     NONE,   NONE,   NONE,   N,      NONE,   NONE,
                                            NW,     NONE,   NONE,   NONE,   NONE,   N,      NONE,   NONE,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   N,      NONE,   NONE };
        
         private static final int b7[] =  { NONE,   NONE,   NONE,   NONE,   NONE,   SW,     S,      SE,
                                            W,      W,      W,      W,      W,      W,      NONE,   E,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NW,     N,      NE,    
                                            NONE,   NONE,   NONE,   NONE,   NW,     NONE,   N,      NONE, 
                                            NONE,   NONE,   NONE,   NW,     NONE,   NONE,   N,      NONE, 
                                            NONE,   NONE,   NW,     NONE,   NONE,   NONE,   N,      NONE,  
                                            NONE,   NW,     NONE,   NONE,   NONE,   NONE,   N,      NONE,
                                            NW,     NONE,   NONE,   NONE,   NONE,   NONE,   N,      NONE };       
                
         private static final int b8[] =  { NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   SW,     S,  
                                            W,      W,      W,      W,      W,      W,      W,      NONE,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   NW,     N,       
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NW,     NONE,   N,    
                                            NONE,   NONE,   NONE,   NONE,   NW,     NONE,   NONE,   N,    
                                            NONE,   NONE,   NONE,   NW,     NONE,   NONE,   NONE,   N,     
                                            NONE,   NONE,   NW,     NONE,   NONE,   NONE,   NONE,   N, 
                                            NONE,   NW,     NONE,   NONE,   NONE,   NONE,   NONE,   N, };    
         
    
        private static final int c1[] =  {  S,      NONE,   SE,     NONE,   NONE,   NONE,   NONE,   NONE,   
                                            S,      SE,     NONE,   NONE,   NONE,   NONE,   NONE,   NONE,
                                            NONE,   E,      E,      E,      E,      E,      E,      E,
                                            N,      NE,     NONE,   NONE,   NONE,   NONE,   NONE,   NONE, 
                                            N,      NONE,   NE,     NONE,   NONE,   NONE,   NONE,   NONE,   
                                            N,      NONE,   NONE,   NE,     NONE,   NONE,   NONE,   NONE,   
                                            N,      NONE,   NONE,   NONE,   NE,     NONE,   NONE,   NONE,  
                                            N,      NONE,   NONE,   NONE,   NONE,   NE,     NONE,   NONE} ;
    
        private static final int c2[] =  {  NONE,   S,      NONE,   SE,     NONE,   NONE,   NONE,   NONE,   
                                            SW,     S,      SE,     NONE,   NONE,   NONE,   NONE,   NONE,   
                                            W,      NONE,   E,      E,      E,      E,      E,      E,
                                            NW,     N,      NE,     NONE,   NONE,   NONE,   NONE,   NONE,
                                            NONE,   N,      NONE,   NE,     NONE,   NONE,   NONE,   NONE,
                                            NONE,   N,      NONE,   NONE,   NE,     NONE,   NONE,   NONE,
                                            NONE,   N,      NONE,   NONE,   NONE,   NE,     NONE,   NONE,
                                            NONE,   N,      NONE,   NONE,   NONE,   NONE,   NE,     NONE };
    
        private static final int c3[] =  {  SW,     NONE,   S,      NONE,   SE,     NONE,   NONE,   NONE,   
                                            NONE,   SW,     S,      SE,     NONE,   NONE,   NONE,   NONE, 
                                            W,      W,      NONE,   E,      E,      E,      E,      E,
                                            NONE,   NW,     N,      NE,     NONE,   NONE,   NONE,   NONE,
                                            NW,     NONE,   N,      NONE,   NE,     NONE,   NONE,   NONE,
                                            NONE,   NONE,   N,      NONE,   NONE,   NE,     NONE,   NONE,
                                            NONE,   NONE,   N,      NONE,   NONE,   NONE,   NE,     NONE,
                                            NONE,   NONE,   N,      NONE,   NONE,   NONE,   NONE,   NE };
        
        private static final int c4[] =  {  NONE,   SW,     NONE,   S,      NONE,   SE,     NONE,   NONE,     
                                            NONE,   NONE,   SW,     S,      SE,     NONE,   NONE,   NONE,   
                                            W,      W,      W,      NONE,   E,      E,      E,      E,
                                            NONE,   NONE,   NW,     N,      NE,     NONE,   NONE,   NONE,
                                            NONE,   NW,     NONE,   N,      NONE,   NE,     NONE,   NONE,
                                            NW,     NONE,   NONE,   N,      NONE,   NONE,   NE,     NONE,
                                            NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE,   NE,
                                            NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE,   NONE };
        
        private static final int c5[] =  {  NONE,   NONE,   SW,     NONE,   S,      NONE,   SE,     NONE,   
                                            NONE,   NONE,   NONE,   SW,     S,      SE,     NONE,   NONE,   
                                            W,      W,      W,      W,      NONE,   E,      E,      E,
                                            NONE,   NONE,   NONE,   NW,     N,      NE,     NONE,   NONE,
                                            NONE,   NONE,   NW,     NONE,   N,      NONE,   NE,     NONE,
                                            NONE,   NW,     NONE,   NONE,   N,      NONE,   NONE,   NE,
                                            NW,     NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE,
                                            NONE,   NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE  };
        
        private static final int c6[] =  {  NONE,   NONE,   NONE,   SW,     NONE,   S,      NONE,   SE,
                                            NONE,   NONE,   NONE,   NONE,   SW,     S,      SE,     NONE,   
                                            W,      W,      W,      W,      W,      NONE,   E,      E,
                                            NONE,   NONE,   NONE,   NONE,   NW,     N,      NE,     NONE,
                                            NONE,   NONE,   NONE,   NW,     NONE,   N,      NONE,   NE,
                                            NONE,   NONE,   NW,     NONE,   NONE,   N,      NONE,   NONE,
                                            NONE,   NW,     NONE,   NONE,   NONE,   N,      NONE,   NONE,
                                            NW,     NONE,   NONE,   NONE,   NONE,   N,      NONE,   NONE };
        
         private static final int c7[] =  { NONE,   NONE,   NONE,   NONE,   SW,     NONE,   S,      NONE,   
                                            NONE,   NONE,   NONE,   NONE,   NONE,   SW,     S,      SE,
                                            W,      W,      W,      W,      W,      W,      NONE,   E,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NW,     N,      NE,    
                                            NONE,   NONE,   NONE,   NONE,   NW,     NONE,   N,      NONE, 
                                            NONE,   NONE,   NONE,   NW,     NONE,   NONE,   N,      NONE, 
                                            NONE,   NONE,   NW,     NONE,   NONE,   NONE,   N,      NONE,  
                                            NONE,   NW,     NONE,   NONE,   NONE,   NONE,   N,      NONE  };       
                
         private static final int c8[] =  { NONE,   NONE,   NONE,   NONE,   NONE,   SW,     NONE,   S,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   SW,     S,  
                                            W,      W,      W,      W,      W,      W,      W,      NONE,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   NW,     N,       
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NW,     NONE,   N,    
                                            NONE,   NONE,   NONE,   NONE,   NW,     NONE,   NONE,   N,    
                                            NONE,   NONE,   NONE,   NW,     NONE,   NONE,   NONE,   N,     
                                            NONE,   NONE,   NW,     NONE,   NONE,   NONE,   NONE,   N }; 
         
    
        private static final int d1[] =  {  S,      NONE,   NONE,   SE,     NONE,   NONE,   NONE,   NONE,   
                                            S,      NONE,   SE,     NONE,   NONE,   NONE,   NONE,   NONE,   
                                            S,      SE,     NONE,   NONE,   NONE,   NONE,   NONE,   NONE,
                                            NONE,   E,      E,      E,      E,      E,      E,      E,
                                            N,      NE,     NONE,   NONE,   NONE,   NONE,   NONE,   NONE, 
                                            N,      NONE,   NE,     NONE,   NONE,   NONE,   NONE,   NONE,   
                                            N,      NONE,   NONE,   NE,     NONE,   NONE,   NONE,   NONE,   
                                            N,      NONE,   NONE,   NONE,   NE,     NONE,   NONE,   NONE } ;
    
        private static final int d2[] =  {  NONE,   S,      NONE,   NONE,   SE,     NONE,   NONE,   NONE,   
                                            NONE,   S,      NONE,   SE,     NONE,   NONE,   NONE,   NONE,   
                                            SW,     S,      SE,     NONE,   NONE,   NONE,   NONE,   NONE,   
                                            W,      NONE,   E,      E,      E,      E,      E,      E,
                                            NW,     N,      NE,     NONE,   NONE,   NONE,   NONE,   NONE,
                                            NONE,   N,      NONE,   NE,     NONE,   NONE,   NONE,   NONE,
                                            NONE,   N,      NONE,   NONE,   NE,     NONE,   NONE,   NONE,
                                            NONE,   N,      NONE,   NONE,   NONE,   NE,     NONE,   NONE };
    
        private static final int d3[] =  {  NONE,   NONE,   S,      NONE,   NONE,   SE,     NONE,   NONE,      
                                            SW,     NONE,   S,      NONE,   SE,     NONE,   NONE,   NONE,   
                                            NONE,   SW,     S,      SE,     NONE,   NONE,   NONE,   NONE, 
                                            W,      W,      NONE,   E,      E,      E,      E,      E,
                                            NONE,   NW,     N,      NE,     NONE,   NONE,   NONE,   NONE,
                                            NW,     NONE,   N,      NONE,   NE,     NONE,   NONE,   NONE,
                                            NONE,   NONE,   N,      NONE,   NONE,   NE,     NONE,   NONE,
                                            NONE,   NONE,   N,      NONE,   NONE,   NONE,   NE,     NONE };
        
        private static final int d4[] =  {  SW,     NONE,   NONE,   S,      NONE,   NONE,   SE,     NONE,   
                                            NONE,   SW,     NONE,   S,      NONE,   SE,     NONE,   NONE,     
                                            NONE,   NONE,   SW,     S,      SE,     NONE,   NONE,   NONE,   
                                            W,      W,      W,      NONE,   E,      E,      E,      E,
                                            NONE,   NONE,   NW,     N,      NE,     NONE,   NONE,   NONE,
                                            NONE,   NW,     NONE,   N,      NONE,   NE,     NONE,   NONE,
                                            NW,     NONE,   NONE,   N,      NONE,   NONE,   NE,     NONE,
                                            NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE,   SE   };
        
        private static final int d5[] =  {  NONE,   SW,     NONE,   NONE,   S,      NONE,   NONE,   SE,
                                            NONE,   NONE,   SW,     NONE,   S,      NONE,   SE,     NONE,   
                                            NONE,   NONE,   NONE,   SW,     S,      SE,     NONE,   NONE,   
                                            W,      W,      W,      W,      NONE,   E,      E,      E,
                                            NONE,   NONE,   NONE,   NW,     N,      NE,     NONE,   NONE,
                                            NONE,   NONE,   NW,     NONE,   N,      NONE,   NE,     NONE,
                                            NONE,   NW,     NONE,   NONE,   N,      NONE,   NONE,   NE,
                                            NW,     NONE,   NONE,   NONE,   N,      NONE,   NONE,   NONE  };
        
        private static final int d6[] =  {  NONE,   NONE,   SW,     NONE,   NONE,   S,      NONE,   NONE,   
                                            NONE,   NONE,   NONE,   SW,     NONE,   S,      NONE,   SE,
                                            NONE,   NONE,   NONE,   NONE,   SW,     S,      SE,     NONE,   
                                            W,      W,      W,      W,      W,      NONE,   E,      E,
                                            NONE,   NONE,   NONE,   NONE,   NW,     N,      NE,     NONE,
                                            NONE,   NONE,   NONE,   NW,     NONE,   N,      NONE,   NE,
                                            NONE,   NONE,   NW,     NONE,   NONE,   N,      NONE,   NONE,
                                            NONE,   NW,     NONE,   NONE,   NONE,   N,      NONE,   NONE  };
        
         private static final int d7[] =  { NONE,   NONE,   NONE,   SW,     NONE,   NONE,   S,      NONE,   
                                            NONE,   NONE,   NONE,   NONE,   SW,     NONE,   S,      NONE,   
                                            NONE,   NONE,   NONE,   NONE,   NONE,   SW,     S,      SE,
                                            W,      W,      W,      W,      W,      W,      NONE,   E,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NW,     N,      NE,    
                                            NONE,   NONE,   NONE,   NONE,   NW,     NONE,   N,      NONE, 
                                            NONE,   NONE,   NONE,   NW,     NONE,   NONE,   N,      NONE, 
                                            NONE,   NONE,   NW,     NONE,   NONE,   NONE,   N,      NONE  };       
                
         private static final int d8[] =  { NONE,   NONE,   NONE,   NONE,   SW,     NONE,   NONE,   S,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   SW,     NONE,   S,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   SW,     S,  
                                            W,      W,      W,      W,      W,      W,      W,      NONE,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   NW,     N,       
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NW,     NONE,   N,    
                                            NONE,   NONE,   NONE,   NONE,   NW,     NONE,   NONE,   N,    
                                            NONE,   NONE,   NONE,   NW,     NONE,   NONE,   NONE,   N }; 
        
    
        private static final int e1[] =  {  S,      NONE,   NONE,   NONE,   SE,     NONE,   NONE,   NONE,   
                                            S,      NONE,   NONE,   SE,     NONE,   NONE,   NONE,   NONE,   
                                            S,      NONE,   SE,     NONE,   NONE,   NONE,   NONE,   NONE,   
                                            S,      SE,     NONE,   NONE,   NONE,   NONE,   NONE,   NONE,
                                            NONE,   E,      E,      E,      E,      E,      E,      E,
                                            N,      NE,     NONE,   NONE,   NONE,   NONE,   NONE,   NONE, 
                                            N,      NONE,   NE,     NONE,   NONE,   NONE,   NONE,   NONE,   
                                            N,      NONE,   NONE,   NE,     NONE,   NONE,   NONE,   NONE } ;
    
        private static final int e2[] =  {  NONE,   S,      NONE,   NONE,   NONE,   SE,     NONE,   NONE,   
                                            NONE,   S,      NONE,   NONE,   SE,     NONE,   NONE,   NONE,   
                                            NONE,   S,      NONE,   SE,     NONE,   NONE,   NONE,   NONE,   
                                            SW,     S,      SE,     NONE,   NONE,   NONE,   NONE,   NONE,   
                                            W,      NONE,   E,      E,      E,      E,      E,      E,
                                            NW,     N,      NE,     NONE,   NONE,   NONE,   NONE,   NONE,
                                            NONE,   N,      NONE,   NE,     NONE,   NONE,   NONE,   NONE,
                                            NONE,   N,      NONE,   NONE,   NE,     NONE,   NONE,   NONE  };
    
        private static final int e3[] =  {  NONE,   NONE,   S,      NONE,   NONE,   NONE,   SE,     NONE,   
                                            NONE,   NONE,   S,      NONE,   NONE,   SE,     NONE,   NONE,      
                                            SW,     NONE,   S,      NONE,   SE,     NONE,   NONE,   NONE,   
                                            NONE,   SW,     S,      SE,     NONE,   NONE,   NONE,   NONE, 
                                            W,      W,      NONE,   E,      E,      E,      E,      E,
                                            NONE,   NW,     N,      NE,     NONE,   NONE,   NONE,   NONE,
                                            NW,     NONE,   N,      NONE,   NE,     NONE,   NONE,   NONE,
                                            NONE,   NONE,   N,      NONE,   NONE,   NE,     NONE,   NONE };
        
        private static final int e4[] =  {  NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   SE,
                                            SW,     NONE,   NONE,   S,      NONE,   NONE,   SE,     NONE,   
                                            NONE,   SW,     NONE,   S,      NONE,   SE,     NONE,   NONE,     
                                            NONE,   NONE,   SW,     S,      SE,     NONE,   NONE,   NONE,   
                                            W,      W,      W,      NONE,   E,      E,      E,      E,
                                            NONE,   NONE,   NW,     N,      NE,     NONE,   NONE,   NONE,
                                            NONE,   NW,     NONE,   N,      NONE,   NE,     NONE,   NONE,
                                            NW,     NONE,   NONE,   N,      NONE,   NONE,   NE,     NONE   };
        
        private static final int e5[] =  {  SW,     NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   
                                            NONE,   SW,     NONE,   NONE,   S,      NONE,   NONE,   SE,
                                            NONE,   NONE,   SW,     NONE,   S,      NONE,   SE,     NONE,   
                                            NONE,   NONE,   NONE,   SW,     S,      SE,     NONE,   NONE,   
                                            W,      W,      W,      W,      NONE,   E,      E,      E,
                                            NONE,   NONE,   NONE,   NW,     N,      NE,     NONE,   NONE,
                                            NONE,   NONE,   NW,     NONE,   N,      NONE,   NE,     NONE,
                                            NONE,   NW,     NONE,   NONE,   N,      NONE,   NONE,   NE  };
        
        private static final int e6[] =  {  NONE,   SW,     NONE,   NONE,   NONE,   S,      NONE,   NONE,   
                                            NONE,   NONE,   SW,     NONE,   NONE,   S,      NONE,   NONE,   
                                            NONE,   NONE,   NONE,   SW,     NONE,   S,      NONE,   SE,
                                            NONE,   NONE,   NONE,   NONE,   SW,     S,      SE,     NONE,   
                                            W,      W,      W,      W,      W,      NONE,   E,      E,
                                            NONE,   NONE,   NONE,   NONE,   NW,     N,      NE,     NONE,
                                            NONE,   NONE,   NONE,   NW,     NONE,   N,      NONE,   NE,
                                            NONE,   NONE,   NW,     NONE,   NONE,   N,      NONE,   NONE };
        
         private static final int e7[] =  { NONE,   NONE,   SW,     NONE,   NONE,   NONE,   S,      NONE,   
                                            NONE,   NONE,   NONE,   SW,     NONE,   NONE,   S,      NONE,   
                                            NONE,   NONE,   NONE,   NONE,   SW,     NONE,   S,      NONE,   
                                            NONE,   NONE,   NONE,   NONE,   NONE,   SW,     S,      SE,
                                            W,      W,      W,      W,      W,      W,      NONE,   E,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NW,     N,      NE,    
                                            NONE,   NONE,   NONE,   NONE,   NW,     NONE,   N,      NONE, 
                                            NONE,   NONE,   NONE,   NW,     NONE,   NONE,   N,      NONE  };       
                
         private static final int e8[] =  { NONE,   NONE,   NONE,   SW,     NONE,   NONE,   NONE,   S,
                                            NONE,   NONE,   NONE,   NONE,   SW,     NONE,   NONE,   S,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   SW,     NONE,   S,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   SW,     S,  
                                            W,      W,      W,      W,      W,      W,      W,      NONE,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   NW,     N,       
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NW,     NONE,   N,    
                                            NONE,   NONE,   NONE,   NONE,   NW,     NONE,   NONE,   N }; 
         
    
        private static final int f1[] =  {  S,      NONE,   NONE,   NONE,   NONE,   SE,     NONE,   NONE,   
                                            S,      NONE,   NONE,   NONE,   SE,     NONE,   NONE,   NONE,   
                                            S,      NONE,   NONE,   SE,     NONE,   NONE,   NONE,   NONE,   
                                            S,      NONE,   SE,     NONE,   NONE,   NONE,   NONE,   NONE,   
                                            S,      SE,     NONE,   NONE,   NONE,   NONE,   NONE,   NONE,
                                            NONE,   E,      E,      E,      E,      E,      E,      E,
                                            N,      NE,     NONE,   NONE,   NONE,   NONE,   NONE,   NONE, 
                                            N,      NONE,   NE,     NONE,   NONE,   NONE,   NONE,   NONE } ;
    
        private static final int f2[] =  {  NONE,   S,      NONE,   NONE,   NONE,   NONE,   SE,     NONE,   
                                            NONE,   S,      NONE,   NONE,   NONE,   SE,     NONE,   NONE,   
                                            NONE,   S,      NONE,   NONE,   SE,     NONE,   NONE,   NONE,   
                                            NONE,   S,      NONE,   SE,     NONE,   NONE,   NONE,   NONE,   
                                            SW,     S,      SE,     NONE,   NONE,   NONE,   NONE,   NONE,   
                                            W,      NONE,   E,      E,      E,      E,      E,      E,
                                            NW,     N,      NE,     NONE,   NONE,   NONE,   NONE,   NONE,
                                            NONE,   N,      NONE,   NE,     NONE,   NONE,   NONE,   NONE };
    
        private static final int f3[] =  {  NONE,   NONE,   S,      NONE,   NONE,   NONE,   NONE,   SE,
                                            NONE,   NONE,   S,      NONE,   NONE,   NONE,   SE,     NONE,   
                                            NONE,   NONE,   S,      NONE,   NONE,   SE,     NONE,   NONE,      
                                            SW,     NONE,   S,      NONE,   SE,     NONE,   NONE,   NONE,   
                                            NONE,   SW,     S,      SE,     NONE,   NONE,   NONE,   NONE, 
                                            W,      W,      NONE,   E,      E,      E,      E,      E,
                                            NONE,   NW,     N,      NE,     NONE,   NONE,   NONE,   NONE,
                                            NW,     NONE,   N,      NONE,   NE,     NONE,   NONE,   NONE };
        
        private static final int f4[] =  {  NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   NONE,   
                                            NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   SE,
                                            SW,     NONE,   NONE,   S,      NONE,   NONE,   SE,     NONE,   
                                            NONE,   SW,     NONE,   S,      NONE,   SE,     NONE,   NONE,     
                                            NONE,   NONE,   SW,     S,      SE,     NONE,   NONE,   NONE,   
                                            W,      W,      W,      NONE,   E,      E,      E,      E,
                                            NONE,   NONE,   NW,     N,      NE,     NONE,   NONE,   NONE,
                                            NONE,   NW,     NONE,   N,      NONE,   NE,     NONE,   NONE };
        
        private static final int f5[] =  {  NONE,   NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   
                                            SW,     NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   
                                            NONE,   SW,     NONE,   NONE,   S,      NONE,   NONE,   SE,
                                            NONE,   NONE,   SW,     NONE,   S,      NONE,   SE,     NONE,   
                                            NONE,   NONE,   NONE,   SW,     S,      SE,     NONE,   NONE,   
                                            W,      W,      W,      W,      NONE,   E,      E,      E,
                                            NONE,   NONE,   NONE,   NW,     N,      NE,     NONE,   NONE,
                                            NONE,   NONE,   NW,     NONE,   N,      NONE,   NE,     NONE  };
        
        private static final int f6[] =  {  SW,     NONE,   NONE,   NONE,   NONE,   S,      NONE,   NONE,   
                                            NONE,   SW,     NONE,   NONE,   NONE,   S,      NONE,   NONE,   
                                            NONE,   NONE,   SW,     NONE,   NONE,   S,      NONE,   NONE,   
                                            NONE,   NONE,   NONE,   SW,     NONE,   S,      NONE,   SE,
                                            NONE,   NONE,   NONE,   NONE,   SW,     S,      SE,     NONE,   
                                            W,      W,      W,      W,      W,      NONE,   E,      E,
                                            NONE,   NONE,   NONE,   NONE,   NW,     N,      NE,     NONE,
                                            NONE,   NONE,   NONE,   NW,     NONE,   N,      NONE,   NE };
        
         private static final int f7[] =  { NONE,   SW,     NONE,   NONE,   NONE,   NONE,   S,      NONE,   
                                            NONE,   NONE,   SW,     NONE,   NONE,   NONE,   S,      NONE,   
                                            NONE,   NONE,   NONE,   SW,     NONE,   NONE,   S,      NONE,   
                                            NONE,   NONE,   NONE,   NONE,   SW,     NONE,   S,      NONE,   
                                            NONE,   NONE,   NONE,   NONE,   NONE,   SW,     S,      SE,
                                            W,      W,      W,      W,      W,      W,      NONE,   E,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NW,     N,      NE,    
                                            NONE,   NONE,   NONE,   NONE,   NW,     NONE,   N,      NONE };       
                
         private static final int f8[] =  { NONE,   NONE,   SW,     NONE,   NONE,   NONE,   NONE,   S,
                                            NONE,   NONE,   NONE,   SW,     NONE,   NONE,   NONE,   S,
                                            NONE,   NONE,   NONE,   NONE,   SW,     NONE,   NONE,   S,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   SW,     NONE,   S,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   SW,     S,  
                                            W,      W,      W,      W,      W,      W,      W,      NONE,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   NW,     N,       
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NW,     NONE,   N }; 
         
      
        private static final int g1[] =  {  S,      NONE,   NONE,   NONE,   NONE,   NONE,   SE,     NONE,   
                                            S,      NONE,   NONE,   NONE,   NONE,   SE,     NONE,   NONE,   
                                            S,      NONE,   NONE,   NONE,   SE,     NONE,   NONE,   NONE,   
                                            S,      NONE,   NONE,   SE,     NONE,   NONE,   NONE,   NONE,   
                                            S,      NONE,   SE,     NONE,   NONE,   NONE,   NONE,   NONE,   
                                            S,      SE,     NONE,   NONE,   NONE,   NONE,   NONE,   NONE,
                                            NONE,   E,      E,      E,      E,      E,      E,      E,
                                            N,      NE,     NONE,   NONE,   NONE,   NONE,   NONE,   NONE } ;
    
        private static final int g2[] =  {  NONE,   S,      NONE,   NONE,   NONE,   NONE,   NONE,   SE,
                                            NONE,   S,      NONE,   NONE,   NONE,   NONE,   SE,     NONE,   
                                            NONE,   S,      NONE,   NONE,   NONE,   SE,     NONE,   NONE,   
                                            NONE,   S,      NONE,   NONE,   SE,     NONE,   NONE,   NONE,   
                                            NONE,   S,      NONE,   SE,     NONE,   NONE,   NONE,   NONE,   
                                            SW,     S,      SE,     NONE,   NONE,   NONE,   NONE,   NONE,   
                                            W,      NONE,   E,      E,      E,      E,      E,      E,
                                            NW,     N,      NE,     NONE,   NONE,   NONE,   NONE,   NONE };
    
        private static final int g3[] =  {  NONE,   NONE,   S,      NONE,   NONE,   NONE,   NONE,   NONE,   
                                            NONE,   NONE,   S,      NONE,   NONE,   NONE,   NONE,   SE,
                                            NONE,   NONE,   S,      NONE,   NONE,   NONE,   SE,     NONE,   
                                            NONE,   NONE,   S,      NONE,   NONE,   SE,     NONE,   NONE,      
                                            SW,     NONE,   S,      NONE,   SE,     NONE,   NONE,   NONE,   
                                            NONE,   SW,     S,      SE,     NONE,   NONE,   NONE,   NONE, 
                                            W,      W,      NONE,   E,      E,      E,      E,      E,
                                            NONE,   NW,     N,      NE,     NONE,   NONE,   NONE,   NONE  };
        
        private static final int g4[] =  {  NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   NONE,  
                                            NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   NONE,   
                                            NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   SE,
                                            SW,     NONE,   NONE,   S,      NONE,   NONE,   SE,     NONE,   
                                            NONE,   SW,     NONE,   S,      NONE,   SE,     NONE,   NONE,     
                                            NONE,   NONE,   SW,     S,      SE,     NONE,   NONE,   NONE,   
                                            W,      W,      W,      NONE,   E,      E,      E,      E,
                                            NONE,   NONE,   NW,     N,      NE,     NONE,   NONE,   NONE  };
        
        private static final int g5[] =  {  NONE,   NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   
                                            NONE,   NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   
                                            SW,     NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   
                                            NONE,   SW,     NONE,   NONE,   S,      NONE,   NONE,   SE,
                                            NONE,   NONE,   SW,     NONE,   S,      NONE,   SE,     NONE,   
                                            NONE,   NONE,   NONE,   SW,     S,      SE,     NONE,   NONE,   
                                            W,      W,      W,      W,      NONE,   E,      E,      E,
                                            NONE,   NONE,   NONE,   NW,     N,      NE,     NONE,   NONE };
        
        private static final int g6[] =  {  NONE,   NONE,   NONE,   NONE,   NONE,   S,      NONE,   NONE,   
                                            SW,     NONE,   NONE,   NONE,   NONE,   S,      NONE,   NONE,   
                                            NONE,   SW,     NONE,   NONE,   NONE,   S,      NONE,   NONE,   
                                            NONE,   NONE,   SW,     NONE,   NONE,   S,      NONE,   NONE,   
                                            NONE,   NONE,   NONE,   SW,     NONE,   S,      NONE,   SE,
                                            NONE,   NONE,   NONE,   NONE,   SW,     S,      SE,     NONE,   
                                            W,      W,      W,      W,      W,      NONE,   E,      E,
                                            NONE,   NONE,   NONE,   NONE,   NW,     N,      NE,     NONE };
        
         private static final int g7[] =  { SW,     NONE,   NONE,   NONE,   NONE,   NONE,   S,      NONE,   
                                            NONE,   SW,     NONE,   NONE,   NONE,   NONE,   S,      NONE,   
                                            NONE,   NONE,   SW,     NONE,   NONE,   NONE,   S,      NONE,   
                                            NONE,   NONE,   NONE,   SW,     NONE,   NONE,   S,      NONE,   
                                            NONE,   NONE,   NONE,   NONE,   SW,     NONE,   S,      NONE,   
                                            NONE,   NONE,   NONE,   NONE,   NONE,   SW,     S,      SE,
                                            W,      W,      W,      W,      W,      W,      NONE,   E,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NW,     N,      NE };       
                
         private static final int g8[] =  { NONE,   SW,     NONE,   NONE,   NONE,   NONE,   NONE,   S,
                                            NONE,   NONE,   SW,     NONE,   NONE,   NONE,   NONE,   S,
                                            NONE,   NONE,   NONE,   SW,     NONE,   NONE,   NONE,   S,
                                            NONE,   NONE,   NONE,   NONE,   SW,     NONE,   NONE,   S,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   SW,     NONE,   S,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   SW,     S,  
                                            W,      W,      W,      W,      W,      W,      W,      NONE,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   NW,     S }; 
  
   
        private static final int h1[] =  {  S,      NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   SE,
                                            S,      NONE,   NONE,   NONE,   NONE,   NONE,   SE,     NONE,   
                                            S,      NONE,   NONE,   NONE,   NONE,   SE,     NONE,   NONE,   
                                            S,      NONE,   NONE,   NONE,   SE,     NONE,   NONE,   NONE,   
                                            S,      NONE,   NONE,   SE,     NONE,   NONE,   NONE,   NONE,   
                                            S,      NONE,   SE,     NONE,   NONE,   NONE,   NONE,   NONE,   
                                            S,      SE,     NONE,   NONE,   NONE,   NONE,   NONE,   NONE,
                                            NONE,   E,      E,      E,      E,      E,      E,      E  } ;
    
        private static final int h2[] =  {  NONE,   S,      NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   
                                            NONE,   S,      NONE,   NONE,   NONE,   NONE,   NONE,   SE,
                                            NONE,   S,      NONE,   NONE,   NONE,   NONE,   SE,     NONE,   
                                            NONE,   S,      NONE,   NONE,   NONE,   SE,     NONE,   NONE,   
                                            NONE,   S,      NONE,   NONE,   SE,     NONE,   NONE,   NONE,   
                                            NONE,   S,      NONE,   SE,     NONE,   NONE,   NONE,   NONE,   
                                            SW,     S,      SE,     NONE,   NONE,   NONE,   NONE,   NONE,   
                                            W,      NONE,   E,      E,      E,      E,      E,      E };
    
        private static final int h3[] =  {  NONE,   NONE,   S,      NONE,   NONE,   NONE,   NONE,   NONE,   
                                            NONE,   NONE,   S,      NONE,   NONE,   NONE,   NONE,   NONE,   
                                            NONE,   NONE,   S,      NONE,   NONE,   NONE,   NONE,   SE,
                                            NONE,   NONE,   S,      NONE,   NONE,   NONE,   SE,     NONE,   
                                            NONE,   NONE,   S,      NONE,   NONE,   SE,     NONE,   NONE,      
                                            SW,     NONE,   S,      NONE,   SE,     NONE,   NONE,   NONE,   
                                            NONE,   SW,     S,      SE,     NONE,   NONE,   NONE,   NONE, 
                                            W,      W,      NONE,   E,      E,      E,      E,      E };
        
        private static final int h4[] =  {  NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   NONE,   
                                            NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   NONE,  
                                            NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   NONE,   
                                            NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   SE,
                                            SW,     NONE,   NONE,   S,      NONE,   NONE,   SE,     NONE,   
                                            NONE,   SW,     NONE,   S,      NONE,   SE,     NONE,   NONE,     
                                            NONE,   NONE,   SW,     S,      SE,     NONE,   NONE,   NONE,   
                                            W,      W,      W,      NONE,   E,      E,      E,      E };
        
        private static final int h5[] =  {  NONE,   NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   
                                            NONE,   NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   
                                            NONE,   NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   
                                            SW,     NONE,   NONE,   NONE,   S,      NONE,   NONE,   NONE,   
                                            NONE,   SW,     NONE,   NONE,   S,      NONE,   NONE,   SE,
                                            NONE,   NONE,   SW,     NONE,   S,      NONE,   SE,     NONE,   
                                            NONE,   NONE,   NONE,   SW,     S,      SE,     NONE,   NONE,   
                                            W,      W,      W,      W,      NONE,   E,      E,      E };
        
        private static final int h6[] =  {  NONE,   NONE,   NONE,   NONE,   NONE,   S,      NONE,   NONE,   
                                            NONE,   NONE,   NONE,   NONE,   NONE,   S,      NONE,   NONE,   
                                            SW,     NONE,   NONE,   NONE,   NONE,   S,      NONE,   NONE,   
                                            NONE,   SW,     NONE,   NONE,   NONE,   S,      NONE,   NONE,   
                                            NONE,   NONE,   SW,     NONE,   NONE,   S,      NONE,   NONE,   
                                            NONE,   NONE,   NONE,   SW,     NONE,   S,      NONE,   SE,
                                            NONE,   NONE,   NONE,   NONE,   SW,     S,      SE,     NONE,   
                                            W,      W,      W,      W,      W,      NONE,   E,      E };
        
         private static final int h7[] =  { NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   S,      NONE,   
                                            SW,     NONE,   NONE,   NONE,   NONE,   NONE,   S,      NONE,   
                                            NONE,   SW,     NONE,   NONE,   NONE,   NONE,   S,      NONE,   
                                            NONE,   NONE,   SW,     NONE,   NONE,   NONE,   S,      NONE,   
                                            NONE,   NONE,   NONE,   SW,     NONE,   NONE,   S,      NONE,   
                                            NONE,   NONE,   NONE,   NONE,   SW,     NONE,   S,      NONE,   
                                            NONE,   NONE,   NONE,   NONE,   NONE,   SW,     S,      SE,
                                            W,      W,      W,      W,      W,      W,      NONE,   E };       
                
         private static final int h8[] = {  SW,     NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   S,
                                            NONE,   SW,     NONE,   NONE,   NONE,   NONE,   NONE,   S,
                                            NONE,   NONE,   SW,     NONE,   NONE,   NONE,   NONE,   S,
                                            NONE,   NONE,   NONE,   SW,     NONE,   NONE,   NONE,   S,
                                            NONE,   NONE,   NONE,   NONE,   SW,     NONE,   NONE,   S,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   SW,     NONE,   S,
                                            NONE,   NONE,   NONE,   NONE,   NONE,   NONE,   SW,     S,  
                                            W,      W,      W,      W,      W,      W,      W,      NONE }; 
         
         // usage: DIRECTION_FROM_ORIGIN[origin][destination]
         private static final int DIRECTION_FROM_ORIGIN[][] = new int[][] { a1, a2, a3, a4, a5, a6, a7, a8,
                                                                            b1, b2, b3, b4, b5, b6, b7, b8,
                                                                            c1, c2, c3, c4, c5, c6, c7, c8,
                                                                            d1, d2, d3, d4, d5, d6, d7, d8,
                                                                            e1, e2, e3, e4, e5, e6, e7, e8,
                                                                            f1, f2, f3, f4, f5, f6, f7, f8,
                                                                            g1, g2, g3, g4, g5, g6, g7, g8,
                                                                            h1, h2, h3, h4, h5, h6, h7, h8 };
         
    // not necessary     
    /**
     * Constructor for Piece class
     * @param positionSerial    Serial int indicating current position of the piece
     * @param pieceTypeColor    Sum of the constants for piece type and color (see Chessboard) for the piece to be moved
     * @param board     Link to parent Chessboard object to be able to interact with other piecesByType
     */
    public Piece(int positionSerial, int pieceTypeColor, Chessboard board) {
        if (Chessboard.ASSERTION_CHECKS) {
            assert (positionSerial >= 0);
        }
        currentPositionSerial = positionSerial;
        this.board = board;
        this.pieceTypeColor = pieceTypeColor;
    }
    
    /**
     * Returns the relative value of the piece
     * @param pieceTypeColor    Sum of the constants for piece type and color (see Chessboard) for the piece
     * @return  value in centipawns
     */
    public static int getValue(int pieceTypeColor) {
        return PIECE_VALUE[pieceTypeColor];
    }

    /**
     * Gets the potential moves that the piece can make from its current position, including those that are illegal for being blocked by other piecesByType.
     * @return A long containing 1s in the locations representing the squares where the piece can potentially move
     */
    public long getPotentialMoves() {
        return getPotentialMoves(pieceTypeColor, currentPositionSerial, board);
    }
    
    /**
     * Gets the potential moves that the piece can make from its current position, including those that are illegal for being blocked by other piecesByType.
     * @param pieceTypeColor    Sum of the constants for piece type and color (see Chessboard) for the piece to be moved
     * @param currentPositionSerial An int serial representing the current position of the piece to be moved
     * @param board             A reference to the parent Chessboard
     * @return A long containing 1s in the locations representing the squares where the piece can potentially move
     */
    public static long getPotentialMoves(int pieceTypeColor, int currentPositionSerial, Chessboard board) {
        if (Chessboard.ASSERTION_CHECKS) {
            assert (currentPositionSerial >= 0);
        }
        int pieceType = Chessboard.getPieceType(pieceTypeColor);
        long potentialMoves = getPotentialMovesExcludingCastle(pieceTypeColor, currentPositionSerial, board);
        
        // add castle
        if (pieceType == Chessboard.KING) {
            int pieceColor = pieceTypeColor - pieceType;
            // castle kingside
            if (!board.castlePiecesHaveMoved(pieceColor, 0) && (board.getPieceSet(Chessboard.ROOK + pieceColor) & KINGS_ROOK[pieceColor]) != 0
                    && board.castleSpaceIsEmpty(pieceColor, 0) && !board.castleSpaceOrPiecesAreAttacked(pieceColor, 0)) {
                potentialMoves |= 0x40L * Chessboard.BACK_RANK_MULTIPLIER[pieceColor];
            }
            // castle queenside
            if (!board.castlePiecesHaveMoved(pieceColor, 1) && (board.getPieceSet(Chessboard.ROOK + pieceColor) & QUEENS_ROOK[pieceColor]) != 0
                    && board.castleSpaceIsEmpty(pieceColor, 1) && !board.castleSpaceOrPiecesAreAttacked(pieceColor, 1)) {
                potentialMoves |= 0x04L * Chessboard.BACK_RANK_MULTIPLIER[pieceColor];
            }
        }
        return potentialMoves;
    }
    
    /**
     * Gets the potential moves that the piece can make from its current position, including those that are illegal for being blocked by other pieces.
     * Excludes castle so to avoid recursion leading to stack overflow when called by isAttacked()
     * @param pieceTypeColor    Sum of the constants for piece type and color (see Chessboard) for the piece to be moved
     * @param currentPositionSerial An int serial representing the current position of the piece to be moved
     * @param board             A reference to the parent Chessboard
     * @return A long containing 1s in the locations representing the squares where the piece can potentially move
     */
    public static long getPotentialMovesExcludingCastle(int pieceTypeColor, int currentPositionSerial, Chessboard board) {
        int pieceType = Chessboard.getPieceType(pieceTypeColor);
        
        // look up potential moves by piece and color and given position
        long potentialMoves = POTENTIAL_MOVES[pieceTypeColor][currentPositionSerial];
        
        // add pawn captures
        if (pieceType == Chessboard.PAWN) {
            // look up potential pawn captures by color (subtracting PAWN constant leaves only color) and given position, then intersecting with opponent's piecesByType.
            potentialMoves |= (POTENTIAL_PAWN_CAPTURES[pieceTypeColor - Chessboard.PAWN][currentPositionSerial] & board.getPiecesOfColor(board.getOpposingPlayer()));
            
            // add en passant pawn captures
            if (board.lastMoveIsDoublePawnPush() && currentPositionSerial > 8 && currentPositionSerial < 56) {
                if (pieceTypeColor - Chessboard.PAWN == 0) {
                    potentialMoves |= (POTENTIAL_PAWN_CAPTURES[0][currentPositionSerial - 8] & board.getEnPassantDestinationSquare());
                }
                else {
                    potentialMoves |= (POTENTIAL_PAWN_CAPTURES[1][currentPositionSerial + 8] & board.getEnPassantDestinationSquare());
                }
            }
        }
        return potentialMoves;
    }
    
    
     /**
     * Gets the pseudo-legal moves that the piece can make from its current position.  
     * Note that this function returns potentially illegal moves that result in the king being in check after its color's move or potentially illegal castles.
     * @return A long containing 1s in the locations representing the squares where the piece can pseudo-legally move
     */
    public long getPossibleMoves() {
        return getPossibleMoves(pieceTypeColor, currentPositionSerial, board);
    }
    
    /**
     * Gets the pseudo-legal moves that the piece can make from its current position.  
     * Note that this function returns potentially illegal moves that result in the king being in check after its color's move or potentially illegal castles.
     * @param pieceTypeColor    Sum of the constants for piece type and color (see Chessboard) for the piece to be moved
     * @param currentPositionSerial An int serial representing the current position of the piece to be moved
     * @param board             A reference to the parent Chessboard
     * @return A long containing 1s in the locations representing the squares where the piece can pseudo-legally move
     */
    public static long getPossibleMoves(int pieceTypeColor, int currentPositionSerial, Chessboard board) {
        long potentialMoves = getPotentialMoves(pieceTypeColor, currentPositionSerial, board);
        int player = Chessboard.getPieceColor(pieceTypeColor);
        return removeSquaresOccupiedByOwnPieces(removeBlockedSquares(potentialMoves, pieceTypeColor, currentPositionSerial, board), player, board);
    }
    
    /**
     * Gets the pseudo-legal moves that the piece can make from its current position from a potential move bitboard calculated previously.  
     * This allows the result of the potential moves function to be stored and reused when necessary.
     * @param pieceTypeColor    Sum of the constants for piece type and color (see Chessboard) for the piece to be moved
     * @param currentPositionSerial An int serial representing the current position of the piece to be moved
     * @param board             A reference to the parent Chessboard
     * @param potentialMoves    The potential move set of the piece represented in a long calculated by the getPotentialMoves method
     * @return A long containing 1s in the locations representing the squares where the piece can pseudo-legally move
     */
    public static long getPossibleMoves(int pieceTypeColor, int currentPositionSerial, Chessboard board, long potentialMoves) {
        int player = Chessboard.getPieceColor(pieceTypeColor);
        return removeSquaresOccupiedByOwnPieces(removeBlockedSquares(potentialMoves, pieceTypeColor, currentPositionSerial, board), player, board);
    }
    
    /**
     * Gets the pseudo-legal moves that the piece can make from its current position.  Excludes castle so as to avoid recursion resulting in stack overflow
     * when called by isAttacked().
     * Note that this function returns potentially illegal moves that result in the king being in check after its color's move or potentially illegal castles.
     * @param pieceTypeColor    Sum of the constants for piece type and color (see Chessboard) for the piece to be moved
     * @param currentPositionSerial An int serial representing the current position of the piece to be moved
     * @param board             A reference to the parent Chessboard
     * @return A long containing 1s in the locations representing the squares where the piece can pseudo-legally move
     */
    public static long getPossibleMovesExcludingCastle(int pieceTypeColor, int currentPositionSerial, Chessboard board) {
        long potentialMoves = getPotentialMovesExcludingCastle(pieceTypeColor, currentPositionSerial, board);
        int player = Chessboard.getPieceColor(pieceTypeColor);
        return removeSquaresOccupiedByOwnPieces(removeBlockedSquares(potentialMoves, pieceTypeColor, currentPositionSerial, board), player, board);
    }  
    
    /**
     * Gets the pseudo-legal moves that the piece can make from its current position.  Excludes castle so as to avoid recursion resulting in stack overflow
     * when called by isAttacked().
     * Note that this function returns potentially illegal moves that result in the king being in check after its color's move or potentially illegal castles.
     * @param pieceTypeColor    Sum of the constants for piece type and color (see Chessboard) for the piece to be moved
     * @param currentPositionSerial An int serial representing the current position of the piece to be moved
     * @param board             A reference to the parent Chessboard
     * @param potentialMoves    The potential move set of the piece represented in a long calculated by the getPotentialMoves method
     * @return A long containing 1s in the locations representing the squares where the piece can pseudo-legally move
     */
    public static long getPossibleMovesExcludingCastle(int pieceTypeColor, int currentPositionSerial, Chessboard board, long potentialMoves) {
        int player = Chessboard.getPieceColor(pieceTypeColor);
        return removeSquaresOccupiedByOwnPieces(removeBlockedSquares(potentialMoves, pieceTypeColor, currentPositionSerial, board), player, board);
    }  
    
    /**
     * Removes the squares in a piece's potential move set occupied by the pieces of the same color
     * @param potentialMoves    The potential move set of the piece represented in a long calculated by the getPotentialMoves method
     * @param player            The player whose turn it is to move
     * @param board             A reference to the parent Chessboard
     * @return  A bitboard containing the piece's attack set minus the squares occupied by the pieces of the same color
     */
    private static long removeSquaresOccupiedByOwnPieces(long potentialMoves, int player, Chessboard board) {
        return potentialMoves & ~board.getPiecesOfColor(player); 
    }
    
    /**
     * Identifies potential moves that support other pieces of the same color.
     * @param potentialMoves    The potential move set of the piece represented in a long calculated by the getPotentialMoves method
     * @param board             A reference to the parent Chessboard
     * @return  A bitboard containing the set of pieces that support other pieces of the same color.
     */
    public static long getPotentialSupportingMoves(long potentialMoves, Chessboard board) {
        return potentialMoves & board.getPiecesOfColor(board.getCurrentPlayer());
    }
    
    /**
     * Identifies potential moves that attack pieces of the opposite color
     * @param potentialMoves    The potential move set of the piece represented in a long calculated by the getPotentialMoves method
     * @param board             A reference to the parent Chessboard
     * @return  A bitboard containing the set of pieces that attack pieces of the opposite color
     */
    public static long getPossibleAttackingMoves(long potentialMoves, Chessboard board) {
        return potentialMoves & board.getPiecesOfColor(board.getOpposingPlayer());
    }
    
    /**
     * Removes squares occupied by the current player's own pieces, or blocked by any pieces, from potential moves.
     * @param potentialMoves    The potential moves that a piece could make from the given position were it not blocked by other pieces
     * @param pieceTypeColor    Sum of the constants for piece type and color (see Chessboard) for the piece to be moved
     * @param currentPosition   A long bitboard containing a 1 at the current position of the piece to be moved
     * @param board             A reference to the parent Chessboard
     * @return A long containing 1s in the locations representing the squares where the piece can pseudo-legally move
     */
    private static long removeBlockedSquares(long potentialMoves, int pieceTypeColor, int currentPositionSerial, Chessboard board) {
        int pieceType = Chessboard.getPieceType(pieceTypeColor);
        long possibleMoves = potentialMoves;
        
        // for sliding pieces, remove squares blocked by other pieces
        if ((pieceType >= Chessboard.QUEEN && pieceType <= Chessboard.BISHOP) || pieceType == Chessboard.PAWN) {
            long blockers = potentialMoves & board.getAllPieces(); // blockers are any occupied squares in the set of the piece's potential moves
            
            // for pawns, remove squares occupied by any other pieces in the same file, since pawns cannot capture forward
            if (pieceType == Chessboard.PAWN) {
                while (blockers != 0) {
                    int blockerSerial = Square.toSerial(blockers);
                    int directionFromOrigin = DIRECTION_FROM_ORIGIN[currentPositionSerial][blockerSerial];
                    if (directionFromOrigin == N || directionFromOrigin == S) {
                        long squaresToRemove = BLOCKED[directionFromOrigin][blockerSerial];
                        possibleMoves &= ~squaresToRemove;
                        possibleMoves &= ~Long.lowestOneBit(blockers);
                    }
                    blockers -= Long.lowestOneBit(blockers);
                }
            }
            else {
                while (blockers != 0) {
                    int blockerSerial = Square.toSerial(blockers);
                    int directionFromOrigin = DIRECTION_FROM_ORIGIN[currentPositionSerial][blockerSerial];
                    long squaresToRemove = BLOCKED[directionFromOrigin][blockerSerial];
                    possibleMoves &= ~squaresToRemove;
                    blockers &= ~squaresToRemove;
                    blockers -= Long.lowestOneBit(blockers);
                }
            }
        }
        return possibleMoves;
    }
    
    
     /**
     * Gets the legal moves that the piece can make from its current position.  Note that this method is inefficient, and should not be used by the engine.
     * @return A long containing 1s in the locations representing the squares where the piece can legally move
     */
    public long getLegalMoves() {
        return getLegalMoves(pieceTypeColor, currentPositionSerial, board);
    }
    
     /**
     * Gets the legal moves that the piece can make from its current position.  Note that this method is inefficient, and should not be used by the engine.
     * @param pieceTypeColor    Sum of the constants for piece type and color (see Chessboard) for the piece to be moved
     * @param currentPositionSerial An int serial representing the current position of the piece to be moved
     * @param board             A reference to the parent Chessboard
     * @return A long containing 1s in the locations representing the squares where the piece can legally move
     */
    public static long getLegalMoves(int pieceTypeColor, int currentPositionSerial, Chessboard board)  {
        long possibleMoves= getPossibleMoves(pieceTypeColor, currentPositionSerial, board);
        long legalMoves = 0;
        while (possibleMoves != 0) {
            long possibleDestination = Long.lowestOneBit(possibleMoves);
            if (isLegalDestination(pieceTypeColor, currentPositionSerial, Square.toSerial(possibleDestination), board)) {
                legalMoves += possibleDestination;
            }
            possibleMoves -= possibleDestination;
        }      
        return legalMoves;
    }
    
     /**
     * Gets the legal moves that the piece can make from its current position.  Note that this method is inefficient, and should not be used by the engine.
     * @param destinationSerial An int serial representing the potential destination square
     * @return A long containing 1s in the locations representing the squares where the piece can legally move
     */    
    public boolean isLegalDestination(int destinationSerial) {
        return isLegalDestination(pieceTypeColor, currentPositionSerial, destinationSerial, board);
    }
    
     /**
     * Gets the legal moves that the piece can make from its current position.  Note that this method is inefficient, and should not be used by the engine.
     * @param pieceTypeColor    Sum of the constants for piece type and color (see Chessboard) for the piece to be moved
     * @param currentPositionSerial An int serial representing the current position of the piece to be moved
     * @param destinationSerial An int serial representing the potential destination square
     * @param board             A reference to the parent Chessboard
     * @return A long containing 1s in the locations representing the squares where the piece can legally move
     */
    public static boolean isLegalDestination(int pieceTypeColor, int currentPositionSerial, int destinationSerial, Chessboard board) {
        Chessboard testBoard = board.getClone();
        testBoard.move(new Move(testBoard.getPly(), currentPositionSerial, destinationSerial, pieceTypeColor, testBoard));
        return !testBoard.isInCheck(Chessboard.getPieceColor(pieceTypeColor));
    }

    /**
     * Converts a long bitboard into an ArrayList of int serials
     * @param bitboard  The long bitboard to be converted
     * @return  An ArrayList of serial ints representing the positions (1s) contained in the bitboard
     */
    public static ArrayList<Integer> bitboardToSerials(long bitboard) {
        ArrayList<Integer> serials = new ArrayList<>(16);
        while (bitboard != 0) {
            serials.add(Long.numberOfTrailingZeros(bitboard));
            bitboard &= ~Long.lowestOneBit(bitboard);
        }
        return serials;
    }
    
    /**
     * Converts a bitboard set of pieces (same type and color) to an ArrayList of Pieces.
     * @param bitboard  Long bitboard containing 1s at the location of the pieces
     * @param board     Reference to parent Chessboard
     * @param pieceTypeColor    Sum of the enumerated constants for type and color (see Chessboard)
     * @return  An array of Piece objects contained by the bitboard
     */
    public static ArrayList<Piece> bitboardToPieces(long bitboard, Chessboard board, int pieceTypeColor) {
        ArrayList<Piece> pieces = new ArrayList<>(16);
        while (bitboard != 0) {
            long position = Long.lowestOneBit(bitboard);
            pieces.add(new Piece(Square.toSerial(position), pieceTypeColor, board));
            bitboard &= ~position;
        }
        return pieces;
    }
    
    /**
     * Converts a long bitboard potentially containing multiple 1 bits into an ArrayList of single-1 bit longs.
     * @param bitboard      64 bit bitboard potentially containing multiple 1 bits
     * @param initialSize   (Optional) Initial size of arraylist (for performance, avoids having ArrayList resize several times)
     * @return  ArrayList of single 1 bit longs
     */
    public static ArrayList<Long> extractSinglesFromBitboard(long bitboard, int initialSize) {
        ArrayList<Long> singles = new ArrayList<>(initialSize);
        while (bitboard != 0) {
            long position = Long.lowestOneBit(bitboard);            
            singles.add(position);
            bitboard &= ~position;
        }
        return singles;        
    }
    
    /**
     * Converts a long bitboard potentially containing multiple 1 bits into an ArrayList of single-1 bit longs.
     * Gives a default initial size of the ArrayList of 16.
     * @param bitboard      64 bit bitboard potentially containing multiple 1 bits
     * @return  ArrayList of single 1 bit longs
     */
    public static ArrayList<Long> extractSinglesFromBitboard(long bitboard) {
        return extractSinglesFromBitboard(bitboard, 16);
    }
    
    /**
     * Converts a long bitboard potentially containing multiple 1 bits into an ArrayList of int serials
     * @param bitboard      64 bit bitboard potentially containing multiple 1 bits
     * @param initialSize   (Optional) Initial size of arraylist (for performance, avoids having ArrayList resize several times)
     * @return  ArrayList of int serials
     */
    public static ArrayList<Integer> extractSerialsFromBitboard(long bitboard, int initialSize) {
        ArrayList<Integer> singles = new ArrayList<>(initialSize);
        while (bitboard != 0) {
            long position = Long.lowestOneBit(bitboard);            
            singles.add(Square.toSerial(position));
            bitboard -= position;
        }
        return singles;    
    }
    
     /**
     * Converts a long bitboard potentially containing multiple 1 bits into an ArrayList of int serials
     * @param bitboard      64 bit bitboard potentially containing multiple 1 bits
     * @return  ArrayList of int serials
     */
    public static ArrayList<Integer> extractSerialsFromBitboard(long bitboard) {
        return extractSerialsFromBitboard(bitboard, 16);
    }
    
    /**
     * Returns the current position of the piece
     * @return  The current position of the piece as an int serial
     */
    public int getCurrentPositionSerial() {
        return currentPositionSerial;
    }
    
}